// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String       @id @default(uuid())
  email         String    @unique
  password      String
  profile       Profile?
}

model  Profile {
  id            String       @id @default(uuid())
  userId        String       @unique
  user          User         @relation(fields: [userId], references: [id])
  name          String?
  createdAt     DateTime     @default(now())
  Posts         Post[]
  Likes         Like[]
  followers     Follow[]     @relation("follower")
  followees     Follow[]     @relation("followee")
  Booking       Booking[]
}

model Follow {
  id            String       @id @default(uuid())
  followerId    String
  userProfile1  Profile   @relation(fields: [followerId], references: [id], name: "follower")
  followeeId    String
  userProfile2  Profile   @relation(fields: [followeeId], references: [id], name: "followee")
  @@unique([followerId, followeeId])
}

model Post {
  id            String       @id @default(uuid())
  authorId      String
  userProfile   Profile   @relation(fields: [authorId], references: [id])
  title         String    @unique
  body          String?   @db.Text
  status        String
  createdAt     DateTime  @default(now())
  likesCount    Int       @default(0)
  likes         Like[]
}

model Like {
  id            String       @id @default(uuid())
  likedBy       String
  userProfile   Profile   @relation(fields: [likedBy], references: [id])
  postId        String
  post          Post      @relation(fields: [postId], references: [id])

  @@unique([likedBy, postId])
}

model Error {
  id            String    @id @default(uuid())
  topic         String
  key           String    @unique
  value         String    @db.Text
  origin        String
  createdAt     DateTime  @default(now())
}

model Event {
  id            String    @id @default(uuid())
  title         String
  description   String    @db.Text
  venue         String    
  start         DateTime
  end           DateTime
  performer     String
  tickets       Ticket[]  
  createdAt     DateTime  @default(now())
}

model Ticket {
  id            String    @id @default(uuid())
  seat          String
  price         Int   
  eventId       String    
  event         Event     @relation(fields: [eventId], references: [id])
  createdAt     DateTime  @default(now())  
  updatedAt     DateTime  @default(now()) 
  status        Status    @default(AVAILABLE)
  bookingId     String?
  booking       Booking?   @relation(fields: [bookingId], references: [id])

}

model Booking {
  id            String    @id @default(uuid())
  tickets       Ticket[]  
  buyerId        String
  profile       Profile   @relation(fields: [buyerId], references: [id])
  paymentInfo   String
  createdAt     DateTime  @default(now())  
}

enum Status {
  AVAILABLE
  PENDING
  SOLD
}